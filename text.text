Programos fragmentas:
void method() {
    class A extends Thread {
    	public void run() {
        	try {
            	Thread.sleep(200);
        	} catch (InterruptedException e) {}
        	System.out.print(1);
    	}
	}
	A a = new A();
	class B extends Thread {
    	public void run() {
        	a.join();
        	try {
            	Thread.sleep(100);
        	} catch (InterruptedException e) {}
        	System.out.print(2);
    	}
	}
	B b = new B();
	a.start();	b.start();
	System.out.print(3);
}
Kas bus atspausdinta vykdant method()?
C. 312


Programos fragmentas:
int c = 1;
try {
	c = a / b;
	System.out.println(c);
} catch (Exception e) {
	c = 0;
}  finally {
	System.out.println(c);
}
Kas bus atspausdinta, jei a=1, o b=0?Immersive Reader
(0/1 Point)
C. 0


Programos fragmentas:
public interface Fun {  //Line 1
    	int op(int a, int b);
}
public class A{ 
    	int n = 0;
    	public void tester(int a) { 
           	Fun f = (x, y) -> x + y + ++n;  //Line 2
               System.out.println(f.op(a, a + 1));  //Line 3
    	} 
    	public static void main(String... args){ 
           	new A().tester(10);  
    	} 
} 
Koks rezultatas?Immersive Reader
(0/1 Point)
A. 22


Programos fragmentas:
interface A{ 
  	int a();
  	default int b(int x) { return 2*x; };
} 
A a = () -> this.b(5);
System.out.println(a.a());
Kas bus atspausdinta?Immersive Reader
(0/1 Point)
A. bus kompiliavimo arba vykdymo klaida


Programos fragmentas:
enum Code{ 
      	one,two,three,four,five; 
} 
public class EnumTester{ 
      	public static void main(String... str){ 
               System.out.println(Code.two); 
      	} 
}
Kas bus atspausdinta?Immersive Reader
(1/1 Point)
C. two


Programos fragmentas:
interface A {
	String methodA();
}
class B implements A {
	public String methodA() { return "A"; }
}

A a = new ...
Ko negalėtumėme įrašyti vietoje daugtaškio?Immersive Reader
(0/1 Point)
C. A();


Programos fragmentas:
final int a = 100;
final int b = a + 10;
final int c = ++b;

System.out.print(c);
Kas bus atspausdinta?Immersive Reader
(0/1 Point)
A. nieko, nes klaida


Programos fragmentas:
Collection<String> a = new TreeSet<>();
a.add("A");
a.add("B");
a.add("A");

System.out.print(a.size());
Kas bus atspausdintaImmersive Reader
(0/1 Point)
C. 2


Programos fragmentas:
List<String> a = new List<>();
a.add("A");
a.add("B");
a.add("A");
System.out.print(a.size());
Kas bus atspausdinta?Immersive Reader
(0/1 Point)
A. nieko, nes klaida


Programos fragmentas:
Double d = Double.valueOf("4,000.00");
System.out.print(d);
Kas bus atspausdintaImmersive Reader
(0/1 Point)
A. Nieko, nes bus vykdymo klaida


Turime programos fragmentą:
class A {
  boolean x;
  Boolean y;
}
A a = new A();
System.out.print(a.x && a.y);
Kas bus atspausdintaImmersive Reader
(0/1 Point)
A. false


Programos fragmentas:
interface A {
	default int a() {
    	return 1;
	}
	default int b() {
    	return a() * 2;
	}
}
class B implements A {
	public int a() {
    	return 2;
 	}
}
class C implements A {}
System.out.print(new C().b() + new B().b());

Kas bus atspausdinta?Immersive Reader
(0/1 Point)
A. 6



Turime programos fragmentą:
class A {
	int value() { return 3; }
}
class B extends A {
	int value() { return 5; }
}

A a = new A();
B b = new B();
A c = new B();
System.out.println(a.value() + b.value() + c.value());
Kas bus atspausdinta?Immersive Reader
(1/1 Point)
A. 13


Turime kodo fragmentą:
void swap(int[] x, int i, int j) {
	int a = x[i];
	x[j] = x[i];
	x[i] = a;
}

int[] a = {1, 2, 3, 4};
swap(a, 1, 2);
System.out.print(a[2] - a[1]);

Kas bus atspausdinta?Immersive Reader
(0/1 Point)
B. 0



Turime programos fragmentą:
class A {
	public static int x = 100;
	public A() {
    	x++;
	}
}
class B extends A {
	public B(int a) {
    	super();
    	B.x += a;
	}
}

A a = new A();
B b = new B(25);
System.out.print(A.x);Immersive Reader
(0/1 Point)
B. 127


Turime klasės kodą:
public class MyClass {
	private static int x = 7;
	public int y;
	String z;
}
Kurie laukai yra egzemplioriaus laukaiImmersive Reader
(0/1 Point)
a. y, z



List<String> one = new ArrayList<String>();
one.add("abc");
List<String> two = new ArrayList<>();
two.add("abc");
if (one == two)
System.out.println("a");
else if (one.equals(two))
System.out.println("b");
else
System.out.println("c");Immersive Reader
(1/1 Point)
C. b


Kas bus atspausdinta?
String a = "value";
String b = "value";
System.out.println(a == b);Immersive Reader
(1/1 Point)
B. true


Ką įrašius kodas kompiliuosis teisingas?
byte x = 5;
byte y = 10;
_____ z = x + y;Immersive Reader
(1/1 Point)
B. int


Duotos klasės:
package P1;
public class A {
  int a1; private int a2; protected int a3; public int a4;
}
package P2;
import ...
public class AA extends A {
  ... this.a1 ... this.a2 ... this.a3 ... this.a4
}
Klasė AA laukų neturi.
Kurie klasės A laukai (a1-a4) yra prieinami klasei AA?Immersive Reader
(0/1 Point)
a3, a4


Ką išves ši programa?
class Base {
  void f(){ System.out.print("a "); this.g(); }
  void g(){ System.out.print("b ");}
}
class Derived extends Base{
  void g() {System.out.print("c ");}
  void f() {System.out.print("d "); super.f();}
  public static void main(String[] args) {
	Base b = new Derived(); b.f();
  }
}Immersive Reader
(0/1 Point)
d a c		doodle cia
d a b    	BITas sako cia


Duotos klasės:
class Base {
public String a = "a" ;
}
class Derived extends Base { 
public String a = "b";
}
Ką išves šis kodo fragmentas?
{ Base b = new Derived();
System.out.println("a" + b.a); }Immersive Reader
(0/1 Point)
A. ab		Bitas cia
B. aa		doodle cia


Kuo skiriasi PDO bibliotekos metodas fetch nuo fetchAll?Immersive Reader
(0/1 Point)
a. Fetch grąžina vienos eilutės rezultatą, fetchAll – daug eilučių